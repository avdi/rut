#!/usr/bin/env ruby
require 'benchmark'
require 'time'
require 'pathname'
require 'etc'
require 'csv'

include Benchmark

module RUT
  VERSION = "0.0.1"

  def self.run
    session = Session.new
    session.configure
    session.run
    session.finish
  end

  class Session
    attr_reader :last_run

    def configure
      configuration_files.each do |path|
        puts "Loading #{path}"
        instance_eval(path.read, path.to_s, 1)
      end
    end

    def run
      the_run = Run.new(self)
      customize_run(the_run).call
      @last_run = the_run
      record(the_run)
    end

    def home_directory
      Pathname(ENV.fetch('HOME'){Etc.getpwuid.dir})
    end

    def working_directory
      @working_directory ||= Pathname.pwd
    end

    def rut_directory
      home_directory + '.rut'
    end

    def log_file
      rut_directory + 'runs.csv'
    end

    def project
      working_directory.basename
    end

    def run_extension_modules
      @run_extension_modules ||= []
    end

    def extend_run(&module_body)
      mod = Module.new
      mod.module_eval(&module_body)
      run_extension_modules << mod
    end
    
    def configuration_files
      @configuration_files ||= working_directory.to_enum(:ascend).inject([]){
        |files, dir|
        files << (dir + '.rutrc') if (dir + '.rutrc').file?
        files
      }.reverse
    end

    def record(run)
      rut_directory.mkpath unless rut_directory.exist?
      CSV.open(log_file, 'ab') do |log|
        log << [
                ::RUT::VERSION,
                run.start_time, 
                run.end_time,
                run.email,
                run.origin,
                run.branch,
                run.project_root,
                run.working_directory,
                run.format_command_environment,
                run.command,
                run.pid,
                run.exit_status.to_i,
                run.tms.utime,
                run.tms.stime,
                run.tms.total,
                run.tms.real,
               ]
      end
    end

    def finish
      exit last_run.exit_status.to_i
    end

    private

    def customize_run(run)
      run_extension_modules.inject(run, :extend)
    end

  end

  # Encapsulates a test run.
  class Run
    include Benchmark

    attr_reader :start_time
    attr_reader :end_time
    attr_reader :pid
    attr_reader :exit_status
    attr_reader :tms
    attr_reader :session

    def initialize(session)
      @session = session
    end

    def call
      @tms = measure do
        @pid, @exit_status = execute_command
      end
      [@pid, @exit_status, @tms]
    end

    def command_line
      @command_line ||= assemble_command(working_directory, args)
    end

    def assemble_command(dir, args)
      if has_no_args?
        command_for_full_run
      elsif all_args_are_files?
        command_for_running_files(args)
      else
        generic_command(args)
      end
    end

    def has_no_args?
      args.empty?
    end

    def all_args_are_files?
      args.all?{|arg| (working_directory + arg).exist?}
    end

    def command_for_full_run
      %w[rake]
    end

    def command_for_running_files(files)
      ['bundle', 'exec', 'rspec', *files]
    end

    def generic_command(argv)
      argv
    end

    def args
      @args ||= ARGV.dup
    end

    def command
      command_line.join(" ")
    end

    def origin
      @origin ||= exec_git_command("config --get remote.origin.url").chomp
    end

    def branch
      @branch ||= exec_git_command("status -s -b").match(/## (.*)$/)[1] || ''
    end

    def email
      @email ||= exec_git_command("config --get user.email").chomp
    end

    def project_root
      @project_root ||= locate_project_root(working_directory)
    end

    def exec_git_command(command)
      `git #{command}`
    end

    def working_directory
      session.working_directory
    end

    def command_environment
      {}
    end

    def command_options
      {}
    end

    def normalized_command_environment
      command_environment.inject({}){|h, (k,v)| h.merge!(k.to_s => v.to_s)}
    end

    def normalized_command_line
      command_line.map(&:to_s)
    end

    def format_command_environment
      command_environment.map{|k,v|"#{k}=#{v}"}.join(" ")
    end

    def format_full_command
      "#{format_command_environment} #{command} (PWD: #{working_directory})".strip
    end

    private

    def execute_command
      puts "-> #{format_full_command}"
      record_start_time
      pid = Process.spawn(normalized_command_environment, 
                          *normalized_command_line, 
                          command_options)
      pid, exit_status = Process.wait2(pid)
      record_end_time
      [pid, exit_status]
    rescue SystemCallError, Interrupt => error
      warn error.message
      [0, 1]
    end

    def record_start_time
      @start_time = now.utc.iso8601
    end

    def record_end_time
      @end_time = now.utc.iso8601
    end

    def now
      Time.now
    end

    def project_root?(dir)
      dir = Pathname(dir)
      ((dir + 'Rakefile').exist? || (dir + 'Gemfile').exist?)
    end

    def locate_project_root(working_directory)
      working_directory.ascend { |p|
        return p if project_root?(p)
      }
      return working_directory
    end

  end
end

RUT.run


